;************************************************************************************
;
; Arquivo base para desenvolvimento do KERNEL - parte 2 do trabalho com o Cesar
;
; Versao: 2019.1.0
;
; AÅreas de memoria:
;
;     0000 - 007F (0 - 127)	     _BOOT
;				     Area de Boot
;				     Aqui deve ser colocado um desvio para o codigo de
;                                    inicializacao do sistema de interrupcoes: JMP _RESET
;
;     0080 - 00FF (128-255)	     _SISTEMA
;				     AÅrea de interface da APP com o KERNEL
;				     Aqui È verificada qual a funcao chamada (valor no R5)
;				     e feito um desvio para o corpo da funcao correspondente
;                                    Nota: o corpo das funÁıes do SISTEMA (kbhit, getchar, 
;                                          putchar, putmsg, gettime, setclock e getclock)
;                                          deve ser codificado na area do KERNEL.
;
;     0100 - 7FFF (256 a 32767)	     _APP
;				     Programa de Aplicacao (APP)
;				     EspaÁo reservado para carga parcial dos aplicativos 
;                                    para testar o KERNEL e corrigir o trabalho. N„o usar.
;
;     8000 - FF7F (32768 a 65407)    _KERNEL
;				     Area para colocar a inicializacao do sistema de 
;                                    interrupcoes (_RESET), a rotina de atendimento de
;                                    interrupcoes - ISR (que inclui os os TRATADORES DE 
;				     INTERRUPCOES do TIMER e do TECLADO), as rotinas que  
;                                    implementam asfuncoes do SISTEMA e a pilha (base da 
;                                    pilha = 65408). Aqui tambem devem ser colocadas as 
;                                    rotinas e variaveis locais usadas pelo KERNEL.
;
;     FF80 - FFBF (65408 a 65471)    _IOAREA16
;				     Area de perifericos, acessada como palavras (16 bits)
;
;     FFC0 - FFFF (65472 a 65535)    _IOAREA08
;				     Area de perifericos, acessada como bytes (8 bits)
;					
;************************************************************************************
;
; Definicao de constantes correspondentes aos enderecos acima descritos
;
_BOOT:		equ	0 	     ; (h0000) boot (desvio para _RESET)
_SISTEMA:	equ	128	     ; (h0080) area de inicializacao das funcoes do SISTEMA
_APP:		equ	256	     ; (h0100) area da aplicacao - sera carregada com programas de teste
_KERNEL:	equ	32768        ; (h8000) area do Kernel
_IOAREA16:	equ	65408	     ; (hFF80) area de perifericos, acessada como palavras (16 bits)
_IOAREA08:	equ	65472 	     ; (hFFC0) area de perifericos, acessada como bytes (8 bits)
_STACK:		equ	_IOAREA16    ; base da pilha na area do kernel
;
;==============================================================================
;	Boot Startup
;	NAO ALTERAR ESSA AÅREA
;==============================================================================
	org		_BOOT
	jmp		_RESET       ; vetor de reset
	dw		2019         ; versao = 2019.1.0
	db		1
	db		0
;	
;==============================================================================
;	Nesta area ficara o codigo que identifica qual a funcao do SISTEMA
;	que foi chamada (atraves de um JSR R7,_SISTEMA), analisando o conteudo
;	do registrador R5 e desviando para o codigo da funcao correspondente, 
;	que dever· ser codificado na area do KERNEL (adiante)
;==============================================================================
	org	_SISTEMA
	CMP #KBHIT, R5
	BEQ _chama_kbhit

	CMP #GETCHAR, R5
	BEQ _chama_getchar

	CMP #GETTIME, R5
	BEQ _chama_gettime

	CMP #PUTCHAR, R5
	BEQ _chama_putchar

	CMP #PUTMSG, R5
	BEQ _chama_putmsg

	CMP #GETCLOCK, R5
	BEQ _chama_getclock
	
	CMP #SETCLOCK, R5
	BEQ _chama_setclock
	RTS R7

_chama_kbhit:
	JSR R7, _KBHIT
	RTS R7
_chama_getchar:
	JSR R7, _GETCHAR
	RTS R7
_chama_gettime:
	JSR R7, _GETTIME
	RTS R7
_chama_putchar:
	JSR R7, _PUTCHAR
	RTS R7
_chama_putmsg:
	JSR R7, _PUTMSG
	RTS R7
_chama_getclock:
	JSR R7, _GETCLOCK
	RTS R7
_chama_setclock:
	JSR R7, _SETCLOCK
	RTS R7
;	
;==============================================================================
;	O programa de aplicacao sera carregado aqui (enderecos 256 a 32767)
;	NADA deve ser codificado neste espaco, que estara reservado para fazer
;	a carga parcial dos programas usados para testar o KERNEL
;==============================================================================
	org	_APP
inicio:
	CMP #1, SEGUNDOS
	BNE inicio
	MOV SEGUNDOS, R0
loop:
	CMP #2, SEGUNDOS
	BNE loop
	MOV SEGUNDOS, R1
	MOV #TMP_MSG, R0
	MOV #0, R1
	JSR R7, _PUTMSG
	HLT
;	
;==============================================================================
;	Area para o kernel
;    	InicializaÁ„o do sistema de interrupcoes (_RESET)
;	Implementacao dos tratadores de interrupcao (_ISR)
;	Implementacao das funcoes do SISTEMA
;	A pilha ocupara os enderecos mais altos desta area (abaixo de 65408)
;==============================================================================
	org	_KERNEL
;==============================================================================
;	Codigo de RESET (BOOT) do processador/interrupcao
;==============================================================================
_RESET:
; 1) Desabilitar o sistema de interrupcoes
CLR INTE
CLR INTS

; 2) Inicializar o stack pointer (SP = R6)
MOV #65408, R6

; 3) Inicializar as variaveis internas usadas pelo sistema de interrupcoes (IVET, INTE, etc.)
MOV #_ISR, IVET
MOV #h03, INTE

; 4) Inicializar as variaveis internas do kernel
CLR TICKS
CLR SEGUNDOS
CLR SEGUNDO
CLR MINUTO
CLR HORA
MOV #-1, TECLA

; 5) Inicializar o teclado zerando o byte de estado (TECST, endereco 65498)
CLR TECST

; 6) Inicializar o timer para interromper a cada X milissegundos (colocando o valor de X na variavel TIMDT)
MOV #200, TIMDT

; 7) Limpar o visor
JSR R7,_S_LIMPA_VISOR_ULTRA

; 8) Habilitar interrupcoes
OR #h80, INTE

; 9) Retornar para o programa de aplicacao com um desvio para o endereco 256 (H0100) da memoria
JMP _APP

;==============================================================================
;	Implementacao das funcoes do SISTEMA
;     	KBHIT, GETCHAR, PUTCHAR, PUTMSG, GETTIME, GETCLOCK e SETCLOCK
;	Nota: cada funcao deve terminar com um RTS R7
;==============================================================================
; Constantes com os cÛdigos das funÁıes do SISTEMA
KBHIT:    equ 0
GETCHAR:  equ 1
GETTIME:  equ 2
PUTCHAR:  equ 3
PUTMSG:   equ 4
GETCLOCK: equ 5
SETCLOCK: equ 6
;

; Retorna 0 em R0 se n„o existe nenhum caracter no buffer e outro valor caso contr·rio
_KBHIT:
	CMP #-1, TECLA
	BNE existe_caracter;
	MOV #0, R0
	RTS R7
existe_caracter:
	MOV #1, R0
	RTS R7

; Retorna em R0 o caracter disponÌvel no buffer. Se este n„o existir, espera atÈ que exista
_GETCHAR:
	CMP #-1, TECLA
	BEQ _GETCHAR
	MOV TECLA, R0
	MOV #-1, TECLA
	RTS R7

; Retorna em R0 o contador de segundos do sistema (valor de 0 a 65535)
_GETTIME:
	MOV SEGUNDOS, R0
	RTS R7

; Printa um caracter no visor. R0 (LSB) deve conter o caracter e R1 (0 a 35) a posiÁ„o do display.
_PUTCHAR:
	MOV R1, -(R6)
	ADD #VISOR, R1
	MOV R0, (R1)
	MOV (R6)+, R1
	RTS R7

; Printa uma mensagem ASCIIZ de forma circular.
; R0 deve conter o endereÁo da mensagem e R1 a posiÁ„o inicial do display
_PUTMSG:
	MOV R0, -(R6)
	MOV R1, -(R6)
	MOV R2, -(R6)
	ADD #VISOR, R1		; transforma o index em posiÁ„o de memÛria
__ESCREVE:
	MOV -1(R0), R2		 ; comeÁa de endereco da mensagem - 1 pra podermos usar 16 bits nas operaÁıes
	AND #h00FF, R2		; zera byte mais significativo
	CMP #0, R2		; verifica se È o fim da string
	BNE __PRINTA_CHAR
	MOV (R6)+, R2
	MOV (R6)+, R1
	MOV (R6)+, R0
	RTS R7
__PRINTA_CHAR:
	MOV R2, (R1)
	INC R0
	INC R1
	BEQ __FIM_DISPLAY
	BR __ESCREVE
__FIM_DISPLAY:
	MOV #VISOR, R1
	BR __ESCREVE

; Retorna informaÁıes do relÛgio do kernel. R0 retorna a hora, R1 os minutos e R2 os segundos
_GETCLOCK:
	MOV HORA, R0
	MOV MINUTO, R1
	MOV SEGUNDO, R2
	RTS R7

; Recebe hora, minuto e segundo em R0, R1 e R2, respectivamente e seta o relÛgio do kernel
; Retorna 0 em R0 em caso de sucesso e outro valor caso contr·rio
_SETCLOCK:
	CMP R0, #23
	BGT __ERRO
	CMP R0, #0
	BLT __ERRO

	CMP R1, #59
	BGT __ERRO
	CMP R1, #0
	BLT __ERRO

	CMP R2, #59
	BGT __ERRO
	CMP R2, #0
	BLT __ERRO

	MOV R0, HORA
	MOV R1, MINUTO
	MOV R2, SEGUNDO
	MOV #0, R0
	RTS R7
__ERRO:
	MOV #1, R0
	RTS R7
	
;
;==============================================================================
;	Rotinas de Tratamento das interrupcoes
;==============================================================================
; Constantes ("mascaras") para teste e alteracao dos bits de INTS na ISR
;
INTS_TIM:	equ	1     ; (0000000000000001) - testar bit 0
nINTS_TIM:	equ	HFFFE ; (1111111111111110) - zerar bit 0
INTS_TEC:	equ	2     ; (0000000000000010) - testar bit 1
nINTS_TEC:	equ	HFFFD ; (1111111111111101) - zerar bit 1
;
; vari·veis de comunicaÁ„o com as funÁıes do SISTEMA
TECLA:		DW	0     ; cÛdigo ASCII da tecla digitada (ou -1 se nenhuma)
SEGUNDOS:	DW	0     ; segundos decorridos desde a inicializaÁ„o (0 a 65535)
HORA:           DW      0     ; hora do relÛgio (0 a 23)
MINUTO:         DW      0     ; minuto da hora do relÛgio (0 a 59)
SEGUNDO:        DW      0     ; segundo da hora do relÛgio (0 a 59)
TICKS:		DW	0     ; ticks do timer
TMP_MSG:	DAB	'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNO',0
;
_ISR:
MOV R0, -(R6)		; salva R0 porque a rotina usa esse registrador
MOV #h02, R0		; mask para interrupÁ„o do teclado
AND INTS, R0		; resulta em R0 diferente de zero se foi o teclado
BNE _teclado		; testa z = 0
INC TICKS		; se n„o foi teclado, foi timer
CMP TICKS, #5		; 200 ms * 5 = 1 s
BEQ _incrementa_seg	; incrementa segundos
_sai_isr:		; sai da ISR quando foi gerada pelo timer		
AND #hFE, INTS		; desliga bit 0 (timer interrupt pending)
MOV (R6)+, R0		; devolve o valor de R0
RTI
_incrementa_seg:
INC SEGUNDOS		; incrementa a variavel de segundos do sistema
INC SEGUNDO		; incrementa a vari·evl de segundos do relogio
CMP #60, SEGUNDO	; compara segundo com 60
BNE _limpa_ticks	; se diferente, limpa ticks e sai da isr


INC MINUTO		; se igual, incrementa o minuto e zera segundo
CLR SEGUNDO		; zera segundo
CMP #60, MINUTO		; compara minuto com 60
BNE _limpa_ticks	; se diferente, limpa ticks e sai da isr

INC HORA		; se igual, incrementa a hora
CLR MINUTO		; e limpa minuto
CMP #24, HORA		; compara hora com 24
BNE _limpa_ticks	; se diferente, limpa ticks e sai da isr
CLR HORA		; sen„o, limpa hora

_limpa_ticks:
CLR TICKS		; limpa os ticks do timer
BR _sai_isr		; sai da ISR chamada pelo timer
_teclado:
MOV TECDT, TECLA
CLR TECST
AND #hFD, INTS		; desliga bit 1 (keyboard interrupt pending)
MOV (R6)+, R0		; devolve o valor de R0
RTI

; FIM DO C”DIGO DO SISTEMA
;
; >>>>>>>>> INSERIR AQUI AS SUB-ROTINAS DA BIBCESAR V16, SE FOR USAR <<<<<<<<<
;
;> Subrotina "ultra rapida" para "limpar" o visor (135 acessos)
;>
;> Chamada da subrotina:
;>
;> JSR R7,_S_LIMPA_VISOR_ULTRA
;>
_S_LIMPA_VISOR_ULTRA:
          MOV R0,-(R6)          ; salva R0 na pilha
          MOV R1,-(R6)          ; salva R1 na pilha
          MOV #65500,R0         ; move end. do LED 0 do visor p/R1
          MOV #65501,R1         ; move end. do LED 1 do visor p/R1
          CLR (R0)+             ; limpa LED 00 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 01 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 02 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 03 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 04 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 05 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 06 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 07 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 08 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 09 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 10 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 11 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 12 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 13 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 14 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 15 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 16 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 17 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 18 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 19 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 20 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 21 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 22 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 23 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 24 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 25 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 26 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 27 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 28 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 29 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 30 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 31 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 32 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 33 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 34 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 35 do visor e soma 2 ao R1
          MOV (R6)+,R1          ; restaura R1
          MOV (R6)+,R0          ; restaura R0
          RTS R7                ; retorna ao ponto de chamada
;>
;>
;> Subrotina para "preencher" o visor com um caractere
;>
;> Chamada da subrotina:
;>
;> MOV #codASCII,R2             ; colocar no R2 o caractere a ser usado
;> JSR R7,_S_PREENCHE_VISOR
;>
_S_PREENCHE_VISOR:
          MOV R0,-(R6)          ; salva R0 na pilha
          MOV R1,-(R6)          ; salva R1 na pilha
          MOV #65500,R1         ; move end. do visor p/R1
          MOV #36,R0            ; move 36 para contador
__MAIS1_LED:
          MOV R2,(R1)           ; move caractere p/1 LED do visor
          INC R1                ; aponta p/LED seguinte
          SOB R0,__MAIS1_LED    ; subtrai 1 do contador
                                ; se <> 0, repete o laco
          MOV (R6)+,R1          ; restaura R1
          MOV (R6)+,R0          ; restaura R0
          RTS R7                ; retorna ao ponto de chamada
;
;------------------------------------------------------------------------------
;	Area reservada para os perifericos
;------------------------------------------------------------------------------
;
; Acesso em 16 bits
	org	_IOAREA16
	daw	[31]
IVET:	dw	0		; Vetor de interrupcao
;
; Acesso em 8 bits
	org	_IOAREA08
	dab	[23]
TIMDT:	db	0		; Registro de programacao do timer
INTS:	db	0		; INTERRUPT STATUS: IP x x x . x x IPStec IPStim
INTE:	db	0		; INTERRUPT ENABLE: IE x x x . x x IEStec IEStim
TECST:	db	0		; Status do teclado
TECDT:	db	0		; Dado do teclado
VISOR:	dab	[36]		; Portas de acesso ao visor
